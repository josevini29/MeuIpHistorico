import React, { Component } from 'react';
import {
  Platform,
  StyleSheet,
  Text,
  View,
  ScrollView,
  AsyncStorage,
  Button,
  Alert,
  StatusBar,
} from 'react-native';
import BackgroundJob from 'react-native-background-job';
import PushNotification from 'react-native-push-notification';
import axios from 'axios';

const backgroundJob = {
  jobKey: 'MeuIpHistorico',
  job: () => goJOB()
};

BackgroundJob.register(backgroundJob);

var backgroundSchedule = {
  jobKey: 'MeuIpHistorico',
  period: 5000,//600000,
  timeout: 10000,
  exact: true
}

BackgroundJob.schedule(backgroundSchedule);

const goJOB = async () => {
  console.log('=> Iniciando meu JOB');
  new App().obterIp(true);
}

function disparaNotif(novoIp, antigoIp, provedor) {
  PushNotification.localNotification({
    id: '0', // (optional) Valid unique 32 bit integer specified as string. default: Autogenerated Unique ID
    largeIcon: 'ic_launcher', // (optional) default: 'ic_launcher'
    smallIcon: 'ic_notification', // (optional) default: 'ic_notification' with fallback for 'ic_launcher'
    bigText: `Ip ${antigoIp} alterado para ${novoIp}. \n Provedor: ${provedor}.`, // (optional) default: 'message' prop
    subText: 'Alteração de IP', // (optional) default: none
    color: '#7A0283', // (optional) default: system default

    /* iOS and Android properties */
    title: 'Alteração de IP', // (optional)
    message: `Novo IP: ${novoIp}`, // (required)
    playSound: false, // (optional) default: true
  });
}

export default class App extends Component {

  constructor(props) {
    super(props);
    this.state = {
      meuip: '',
      provedor: '',
      historico: [],
    };
  }

  componentWillMount() {
    this.obterIp(false);
  }

  obterIp(inJob) {
    console.log('=> Obtendo Ip');
    axios.get('http://ip-api.com/json')
      .then((response) => {
        var respjson = response.data;
        this.salvaHistorico(respjson.query, respjson.as, inJob);
        if (!inJob) {
          this.setState({
            meuip: respjson.query,
            provedor: respjson.as,
          });
        }
      })
      .catch((error) => {
        if (!inJob) {
          Alert.Alert('Erro', error.message)
        }
      });
  }

  salvaHistorico(ip, provedor, inJob) {
    AsyncStorage.getItem('historico')
      .then(response => {
        let hist = [];
        if (response !== null) {
          hist = JSON.parse(response);
        }
        const dataS = new Date();
        let data = (dataS.getDate().toString().length === 1 ? '0' + dataS.getDate().toString() : dataS.getDate().toString()) + '/';
        data += ((dataS.getMonth() + 1).toString().length === 1 ? '0' + (dataS.getMonth() + 1).toString() : (dataS.getMonth() + 1).toString()) + '/';
        data += dataS.getFullYear() + ' ';
        data += (dataS.getHours().toString().length === 1 ? '0' + dataS.getHours().toString() : dataS.getHours().toString()) + ':';
        data += (dataS.getMinutes().toString().length === 1 ? '0' + dataS.getMinutes().toString() : dataS.getMinutes().toString()) + ':';
        data += (dataS.getSeconds().toString().length === 1 ? '0' + dataS.getSeconds().toString() : dataS.getSeconds().toString());

        const item = {
          data,
          ip,
          provedor,
        }
        hist.push(item);
        AsyncStorage.setItem('historico', JSON.stringify(hist));

        if (hist.length >= 50) { //Limita a quantidade gravada
          hist = hist.slice(1, hist.length);
        }

        var histOrdenado = hist.reverse();

        if (!inJob) {
          this.setState({
            historico: histOrdenado,
          });
        } else {
          for (var i = 0; i < histOrdenado.length; i++) {
            if (histOrdenado[i].provedor === provedor) {
              if (histOrdenado[i].ip !== ip) {
                disparaNotif(ip, histOrdenado[i].ip, provedor);
              }
              break;
            }
          }
        }
      }).catch(error => {
        console.log('ERRO:', error.message);
      });
  }

  render() {
    return (
      <View style={styles.container}>

        <StatusBar
          backgroundColor='#45004A'
        />

        <View style={styles.viewBarra}>
          <Text style={styles.txtBarra}>MeuIp Histórico</Text>
        </View>
        <View style={styles.viewIpAtual}>
          <View style={styles.viewIp}>
            <Text style={styles.txtIp}>IP: {this.state.meuip}</Text>
          </View>
          <View style={styles.viewIp}>
            <Text style={styles.txtProvedor}>Provedor: {this.state.provedor}</Text>
          </View>
        </View>

        <View style={styles.viewIpHistorico}>
          <ScrollView>
            {this.state.historico.map(item =>
              <View key={item.data} style={styles.viewIpItem}>
                <View style={styles.viewHistDataIp}>
                  <Text>Data: {item.data}</Text>
                  <Text style={styles.txtIpHist}>IP: {item.ip}</Text>
                </View>
                <View>
                  <Text>Provedor: {item.provedor}</Text>
                </View>
              </View>
            )}
          </ScrollView>
          <Button title='Limpar Histórico' onPress={() => {
            Alert.alert(
              'Confirmação',
              'Deseja remover o histórico?',
              [
                { text: 'Cancelar', onPress: () => { }, style: 'cancel' },
                {
                  text: 'OK', onPress: () => {
                    AsyncStorage.removeItem('historico');
                    this.setState({
                      historico: [],
                    });
                  }
                },
              ],
              { cancelable: false }
            )
          }} />
        </View>

      </View>
    );
  }
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#F5FCFF',
  },
  viewBarra: {
    height: 60,
    backgroundColor: '#5D086B',
    justifyContent: 'center',
    padding: 8,
  },
  viewIpAtual: {
    flex: 1,
    borderWidth: 1,
    margin: 1,
    padding: 4,
  },
  viewIpHistorico: {
    flex: 2,
    borderWidth: 1,
    margin: 1
  },
  viewIp: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
  },
  viewIpItem: {
    borderWidth: 1,
    borderColor: '#CCC',
    padding: 6,
  },
  viewHistDataIp: {
    flexDirection: 'row',
  },
  txtBarra: {
    fontSize: 26,
    color: '#FFF',
    fontFamily: 'Cambria',
    fontWeight: 'bold',
  },
  txtIp: {
    fontSize: 32,
    color: 'red',
  },
  txtProvedor: {
    fontSize: 18,
    color: '#000',
  },
  txtIpHist: {
    marginLeft: 15,
    color: 'blue',
  }
});

